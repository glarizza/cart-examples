##  Payload-free Package Example
##
##  Author:         Gary Larizza
##  License:        Apache
##  Created:        9/17/2011
##  Last Modified:  9/17/2011 
##
##  Description:
##
##  This module will build a payload-free package (a package that runs a script
##  on your system but doesn't actually install anything from its payload).
##  Simply create a script, name it 'postflight', and drop it in the same 
##  directory as this Rakefile.
##  
##
##  Creating your package:
##
##  Change to the directory containing this module and execute the following
##  commands to build the resultant file:
##
##  'sudo rake pkg'  ==>  Builds a Package
##  'sudo rake dmg'  ==>  Builds a DMG
##  'sudo rake zip'  ==>  Builds a Zip file
##

require 'pathname'
require 'fileutils'
require "#{Pathname.pwd.parent.parent}/cart"

task :default => :pkg
raise "\n==========\nThis Rakefile must run as root\nRun \"sudo rake <task>\"\n==========" unless Process.uid == 0


# Any variables that need to be changed should be done inside the customize
# method
def customize
  @title                  = "Payload_Free_Package"
  @reverse_domain         = "com.anycorp"
end

# The pack method is for adding files to the package's payload. Note that
# @working_tree['WORK_D'] is the path to the working directory. All files
# installed into this directory will be copied into the package's payload.
def pack
  #Throw the postflight script into the Scripts directory
  safe_system("sudo #{INSTALL} -m 0755 postflight #{@working_tree['SCRIPT_D']}")
end


### Nothing Below this line should need to be modified ###


desc "This task will create an Apple .pkg file"
task :pkg do
  customize
  make_directory_tree
  pack
  output_file
  build_package
  copy_to_local_dir(@package_file)
  announce("Your package #{@package_file} has been built!")
end

desc "This task will create an Apple .pkg encapsulated into a .dmg file"
task :dmg do
  customize
  make_directory_tree
  pack
  output_file
  build_dmg
  announce("Your DMG #{@dmg_file} has been built!")
end

desc "This task will create a .zip file with your package in it."
task :zip do
  customize
  make_directory_tree
  pack
  output_file
  build_zip
  announce("Your Zip file #{@zip_file} has been built!")
end
